{
  
    
        "post0": {
            "title": "Pandas Basics - Getting up-and-running",
            "content": "This notebook will get you to a point where you can quickly explore a dataset along with basic dataset editing. . You can simply load Pandas using &quot;Import Pandas&quot;, however to save time when calling the module we load it with the alias &quot;pd&quot; . # Import Pandas import pandas as pd . For this example we will use an IMDB dataset that can downloaded from Kaggle here . The dataset is formatted as CSV so we need to call the .read_csv() function. If it was saved as an Excel file we could use the .read_excel() function. . # Import IMDB dataset df = pd.read_csv(&#39;IMDb movies.csv&#39;) . Use the .head() method to view the first rows of data. If you pass a value in, in this case 2, then only the first 2 rows will be selected. . df.head(2) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | NaN | NaN | NaN | NaN | 4.0 | 2.0 | . 2 rows × 22 columns . Use the .tail() method to view the last rows of data. If you pass a value in, in this case 2, then only the first 2 rows will be selected. . df.tail(2) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 81271 tt9911774 | Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | 130 | India | Malayalam | Vineesh Aaradya | ... | Anoop Chandran, Indrans, Sona Nair, Simon Brit... | NaN | 8.4 | 369 | NaN | NaN | NaN | NaN | NaN | NaN | . 81272 tt9914286 | Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | 98 | Turkey | Turkish | Ahmet Faik Akinci | ... | Ahmet Faik Akinci, Belma Mamati, Metin Keçeci,... | NaN | 7.2 | 190 | NaN | NaN | $ 2833 | NaN | NaN | NaN | . 2 rows × 22 columns . You can use the .shape method to check the dimension of the dataframe. In the example below we see there are 81273 rows and 22 columns. . df.shape . (81273, 22) . The .size method returns the number of cells int the dataframe i.e. number of rows by columns. . df.size . 1788006 . The .info() is very useful as you can simultaneously check the names of each column, how many values are not null in in each column, and their datatype. . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 81273 entries, 0 to 81272 Data columns (total 22 columns): # Column Non-Null Count Dtype -- -- 0 imdb_title_id 81273 non-null object 1 title 81273 non-null object 2 original_title 81273 non-null object 3 year 81273 non-null int64 4 date_published 81273 non-null object 5 genre 81273 non-null object 6 duration 81273 non-null int64 7 country 81234 non-null object 8 language 80518 non-null object 9 director 81200 non-null object 10 writer 79780 non-null object 11 production_company 76948 non-null object 12 actors 81207 non-null object 13 description 78843 non-null object 14 avg_vote 81273 non-null float64 15 votes 81273 non-null int64 16 budget 81273 non-null object 17 usa_gross_income 15094 non-null object 18 worlwide_gross_income 29892 non-null object 19 metascore 12722 non-null float64 20 reviews_from_users 74196 non-null float64 21 reviews_from_critics 70286 non-null float64 dtypes: float64(4), int64(3), object(15) memory usage: 13.1+ MB . Get a quick statistical summary of the dataframe by using the .describe() method below. Only columns with numerical values be analysed. . df.describe() . year duration avg_vote votes metascore reviews_from_users reviews_from_critics . count 81273.000000 | 81273.000000 | 81273.000000 | 8.127300e+04 | 12722.000000 | 74196.000000 | 70286.000000 | . mean 1993.007210 | 100.565981 | 5.926587 | 9.421771e+03 | 55.762695 | 43.753194 | 27.992758 | . std 23.992284 | 25.320189 | 1.243315 | 5.220245e+04 | 17.757453 | 159.903568 | 58.708764 | . min 1906.000000 | 40.000000 | 1.000000 | 9.900000e+01 | 1.000000 | 1.000000 | 1.000000 | . 25% 1979.000000 | 88.000000 | 5.200000 | 2.060000e+02 | 43.000000 | 4.000000 | 3.000000 | . 50% 2002.000000 | 96.000000 | 6.100000 | 4.950000e+02 | 56.000000 | 9.000000 | 8.000000 | . 75% 2012.000000 | 108.000000 | 6.800000 | 1.865000e+03 | 69.000000 | 26.000000 | 24.000000 | . max 2019.000000 | 3360.000000 | 10.000000 | 2.159628e+06 | 100.000000 | 8302.000000 | 987.000000 | . If you pass in the include = &#39;all&#39; argument to .describe() you can get categorical statistics along with numerical. . df.describe(include=&#39;all&#39;) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . count 81273 | 81273 | 81273 | 81273.000000 | 81273 | 81273 | 81273.000000 | 81234 | 80518 | 81200 | ... | 81207 | 78843 | 81273.000000 | 8.127300e+04 | 22804 | 15094 | 29892 | 12722.000000 | 74196.000000 | 70286.000000 | . unique 81273 | 76618 | 76631 | NaN | 21087 | 1264 | NaN | 4632 | 4251 | 32544 | ... | 81159 | 78727 | NaN | NaN | 4425 | 14648 | 29378 | NaN | NaN | NaN | . top tt0116635 | Anna | Anna | NaN | 2010 | Drama | NaN | USA | English | Michael Curtiz | ... | Nobuyo Ôyama, Noriko Ohara, Michiko Nomura, Ka... | The story of | NaN | NaN | $ 1000000 | $ 1000000 | $ 8144 | NaN | NaN | NaN | . freq 1 | 9 | 9 | NaN | 111 | 11809 | NaN | 27490 | 34519 | 86 | ... | 13 | 11 | NaN | NaN | 731 | 19 | 16 | NaN | NaN | NaN | . mean NaN | NaN | NaN | 1993.007210 | NaN | NaN | 100.565981 | NaN | NaN | NaN | ... | NaN | NaN | 5.926587 | 9.421771e+03 | NaN | NaN | NaN | 55.762695 | 43.753194 | 27.992758 | . std NaN | NaN | NaN | 23.992284 | NaN | NaN | 25.320189 | NaN | NaN | NaN | ... | NaN | NaN | 1.243315 | 5.220245e+04 | NaN | NaN | NaN | 17.757453 | 159.903568 | 58.708764 | . min NaN | NaN | NaN | 1906.000000 | NaN | NaN | 40.000000 | NaN | NaN | NaN | ... | NaN | NaN | 1.000000 | 9.900000e+01 | NaN | NaN | NaN | 1.000000 | 1.000000 | 1.000000 | . 25% NaN | NaN | NaN | 1979.000000 | NaN | NaN | 88.000000 | NaN | NaN | NaN | ... | NaN | NaN | 5.200000 | 2.060000e+02 | NaN | NaN | NaN | 43.000000 | 4.000000 | 3.000000 | . 50% NaN | NaN | NaN | 2002.000000 | NaN | NaN | 96.000000 | NaN | NaN | NaN | ... | NaN | NaN | 6.100000 | 4.950000e+02 | NaN | NaN | NaN | 56.000000 | 9.000000 | 8.000000 | . 75% NaN | NaN | NaN | 2012.000000 | NaN | NaN | 108.000000 | NaN | NaN | NaN | ... | NaN | NaN | 6.800000 | 1.865000e+03 | NaN | NaN | NaN | 69.000000 | 26.000000 | 24.000000 | . max NaN | NaN | NaN | 2019.000000 | NaN | NaN | 3360.000000 | NaN | NaN | NaN | ... | NaN | NaN | 10.000000 | 2.159628e+06 | NaN | NaN | NaN | 100.000000 | 8302.000000 | 987.000000 | . 11 rows × 22 columns . Indexing a dataset . You can select a single column by simply typing the name of the column after the dataframe name, separated by a fullstop. A single column is returned as a Series datatype. . Note: This only works if the column name is does not contain spaces. . df.year . 0 1906 1 1911 2 1912 3 1911 4 1912 ... 81268 2019 81269 2019 81270 2019 81271 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . Second method for selecting a single column. This method works even if the column name contains spaces. . df[&#39;year&#39;] . 0 1906 1 1911 2 1912 3 1911 4 1912 ... 81268 2019 81269 2019 81270 2019 81271 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . You can sort column values either alphabetically or numerically by using the .sort_values() method. . Note: By default values will be sorted in ascending order. . df[&#39;year&#39;].sort_values() . 0 1906 34547 1911 3 1911 38007 1911 1 1911 ... 78770 2019 78735 2019 78707 2019 78856 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . Pass ascending=False into the sort_values() method and values will be sorted in descending order. . df[&#39;year&#39;].sort_values(ascending=False) . 81272 2019 78856 2019 78707 2019 78735 2019 78770 2019 ... 1 1911 38007 1911 3 1911 34547 1911 0 1906 Name: year, Length: 81273, dtype: int64 . Use .value_counts() to quickly check the number of occurances of each value in a column. The values themselves are returned in the index of a new data object. . df[&#39;year&#39;].value_counts() . 2017 3106 2016 3033 2015 2903 2018 2880 2014 2851 ... 1915 21 1913 13 1912 5 1911 4 1906 1 Name: year, Length: 110, dtype: int64 . Get the maximum value in a column using the .max() . df.year.max() . 2019 . Get the minimum value in a column using the .min() . df.year.min() . 1906 . Get the standard deviation of all values in a column using .std() . df.year.std() . 23.992283867737942 . Get the variance of all values in a column using .var() . df.year.var() . 575.6296851901183 . Get the number of values using the .count() method . df.year.count() . 81273 . Get the mean of all values in a column using .mean() . df.year.mean() . 1993.0072102666322 . Get the median of all values in a column using .median() . df.year.median() . 2002.0 . Use the following command to create a list of all column names. . df.columns.to_list() . [&#39;imdb_title_id&#39;, &#39;title&#39;, &#39;original_title&#39;, &#39;year&#39;, &#39;date_published&#39;, &#39;genre&#39;, &#39;duration&#39;, &#39;country&#39;, &#39;language&#39;, &#39;director&#39;, &#39;writer&#39;, &#39;production_company&#39;, &#39;actors&#39;, &#39;description&#39;, &#39;avg_vote&#39;, &#39;votes&#39;, &#39;budget&#39;, &#39;usa_gross_income&#39;, &#39;worlwide_gross_income&#39;, &#39;metascore&#39;, &#39;reviews_from_users&#39;, &#39;reviews_from_critics&#39;] . Select multiple columns by passing the column names as a list into the dataframe brackets. . df[[&#39;title&#39;,&#39;year&#39;,&#39;votes&#39;]] . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . You can use an = sign to assign a subset of a dataframe to a new dataframe. . df = df[[&#39;title&#39;,&#39;year&#39;,&#39;votes&#39;]] df . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . Using .loc[...] . You can select a value from a column using .iloc[] . df.title.iloc[2] . &#39;Cleopatra&#39; . You can select an complete row from a dataframe using the following. . df.iloc[2] . title Cleopatra year 1912 votes 420 Name: 2, dtype: object . Select multiple values from a column using the following. . df.title.iloc[0:5] . 0 The Story of the Kelly Gang 1 Den sorte drøm 2 Cleopatra 3 L&#39;Inferno 4 From the Manger to the Cross; or, Jesus of Naz... Name: title, dtype: object . Use negitive indexing to select multiple values at the end of a column. . df.title.iloc[-3:] . 81270 Pengalila 81271 Padmavyuhathile Abhimanyu 81272 Sokagin Çocuklari Name: title, dtype: object . Use negitive indexing to select multiple rows at the end of a dataframe. . df.iloc[-3:] . title year votes . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . Select a single column from a dataframe using its index. . df.iloc[:,1] . 0 1906 1 1911 2 1912 3 1911 4 1912 ... 81268 2019 81269 2019 81270 2019 81271 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . Select multiple columns from a dataframe using column indexing . df.iloc[:,[0,2]] . imdb_title_id original_title . 0 tt0000574 | The Story of the Kelly Gang | . 1 tt0001892 | Den sorte drøm | . 2 tt0002101 | Cleopatra | . 3 tt0002130 | L&#39;Inferno | . 4 tt0002199 | From the Manger to the Cross; or, Jesus of Naz... | . ... ... | ... | . 81268 tt9903716 | Jessie | . 81269 tt9905412 | Ottam | . 81270 tt9905462 | Pengalila | . 81271 tt9911774 | Padmavyuhathile Abhimanyu | . 81272 tt9914286 | Sokagin Çocuklari | . 81273 rows × 2 columns . Select multiple rows from a datafrm using row indexes. . df.iloc[[0,2,3,4],:] . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . Select a single cell using row and column indexes. . df.iloc[4,1] . 1912 . Subsetting using .loc[..] . You can subset a dataframe using column and index names by using the .loc[..] method. In the example, one column is subset using the column name. . df.loc[:,&#39;title&#39;] . 0 The Story of the Kelly Gang 1 Den sorte drøm 2 Cleopatra 3 L&#39;Inferno 4 From the Manger to the Cross; or, Jesus of Naz... ... 81268 Jessie 81269 Ottam 81270 Pengalila 81271 Padmavyuhathile Abhimanyu 81272 Sokagin Çocuklari Name: title, Length: 81273, dtype: object . Below all columns between &#39;title&#39; and &#39;genre&#39; are selected. . df.loc[:,&#39;title&#39;:&#39;genre&#39;] . title original_title year date_published genre . 0 The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | . 1 Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | . 2 Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | . 3 L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | . 4 From the Manger to the Cross; or, Jesus of Naz... | From the Manger to the Cross; or, Jesus of Naz... | 1912 | 1913 | Biography, Drama | . ... ... | ... | ... | ... | ... | . 81268 Jessie | Jessie | 2019 | 2019-03-15 | Horror, Thriller | . 81269 Ottam | Ottam | 2019 | 2019-03-08 | Drama | . 81270 Pengalila | Pengalila | 2019 | 2019-03-08 | Drama | . 81271 Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | . 81272 Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | . 81273 rows × 5 columns . df.loc[0:3,&#39;title&#39;:&#39;genre&#39;] . title original_title year date_published genre . 0 The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | . 1 Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | . 2 Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | . 3 L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | . You can rename column names by passing in a list of new names using the .columns method. . df.columns = [&#39;title_new&#39;,&#39;year_new&#39;,&#39;votes_new&#39;] df . title_new year_new votes_new . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . # Rename column names back to their oringinal names. df.columns = [&#39;title&#39;,&#39;year&#39;,&#39;votes&#39;] df . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . # Reimporting the full dataframe from the CSV file. df = pd.read_csv(&#39;IMDb movies.csv&#39;) df.head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | NaN | NaN | NaN | NaN | 4.0 | 2.0 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | USA | English | Charles L. Gaskill | ... | Helen Gardner, Pearl Sindelar, Miss Fielding, ... | The fabled queen of Egypt&#39;s affair with Roman ... | 5.2 | 420 | $ 45000 | NaN | NaN | NaN | 24.0 | 3.0 | . 3 rows × 22 columns . Remove all rows with null (NAN) values using the .dropna() method. . df.dropna().head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 488 tt0017136 | Metropolis | Metropolis | 1927 | 1927-02-06 | Drama, Sci-Fi | 153 | Germany | German | Fritz Lang | ... | Alfred Abel, Gustav Fröhlich, Rudolf Klein-Rog... | In a futuristic city sharply divided between t... | 8.3 | 148396 | DEM 6000000 | $ 1236166 | $ 1349711 | 98.0 | 471.0 | 194.0 | . 1005 tt0021749 | City Lights | City Lights | 1931 | 1931-08-21 | Comedy, Drama, Romance | 87 | USA | English | Charles Chaplin | ... | Virginia Cherrill, Florence Lee, Harry Myers, ... | With the aid of a wealthy erratic tippler, a d... | 8.5 | 152716 | $ 1500000 | $ 19181 | $ 32609 | 99.0 | 270.0 | 120.0 | . 2336 tt0027977 | Modern Times | Modern Times | 1936 | 1936-10-16 | Comedy, Drama, Family | 87 | USA | English | Charles Chaplin | ... | Charles Chaplin, Paulette Goddard, Henry Bergm... | The Tramp struggles to live in modern industri... | 8.5 | 197969 | $ 1500000 | $ 163577 | $ 445226 | 96.0 | 262.0 | 146.0 | . 3 rows × 22 columns . Drop all columns with missing values. . df.dropna(axis=&#39;columns&#39;) . imdb_title_id title original_title year date_published genre duration avg_vote votes . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | 6.1 | 537 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | 5.9 | 171 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | 5.2 | 420 | . 3 tt0002130 | L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | 68 | 7.0 | 2019 | . 4 tt0002199 | From the Manger to the Cross; or, Jesus of Naz... | From the Manger to the Cross; or, Jesus of Naz... | 1912 | 1913 | Biography, Drama | 60 | 5.7 | 438 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 81268 tt9903716 | Jessie | Jessie | 2019 | 2019-03-15 | Horror, Thriller | 106 | 7.2 | 219 | . 81269 tt9905412 | Ottam | Ottam | 2019 | 2019-03-08 | Drama | 120 | 7.8 | 510 | . 81270 tt9905462 | Pengalila | Pengalila | 2019 | 2019-03-08 | Drama | 111 | 8.4 | 604 | . 81271 tt9911774 | Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | 130 | 8.4 | 369 | . 81272 tt9914286 | Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | 98 | 7.2 | 190 | . 81273 rows × 9 columns . Drop missing values from specified columns . df.dropna(subset=[&#39;metascore&#39;,&#39;budget&#39;]).head(2) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 73 tt0006864 | Intolerance: Love&#39;s Struggle Throughout the Ages | Intolerance: Love&#39;s Struggle Throughout the Ages | 1916 | 1918-02-24 | Drama, History | 163 | USA | NaN | D.W. Griffith | ... | Lillian Gish, Mae Marsh, Robert Harron, F.A. T... | The story of a poor young woman, separated by ... | 7.8 | 13116 | $ 385907 | NaN | NaN | 93.0 | 105.0 | 77.0 | . 488 tt0017136 | Metropolis | Metropolis | 1927 | 1927-02-06 | Drama, Sci-Fi | 153 | Germany | German | Fritz Lang | ... | Alfred Abel, Gustav Fröhlich, Rudolf Klein-Rog... | In a futuristic city sharply divided between t... | 8.3 | 148396 | DEM 6000000 | $ 1236166 | $ 1349711 | 98.0 | 471.0 | 194.0 | . 2 rows × 22 columns . You can pass the &#39;inplace&#39; argument into many methods. This will change the dataframe without it needing to be reassigned using the equal sign. . df.dropna(axis=&#39;columns&#39;, inplace = True) df . imdb_title_id title original_title year date_published genre duration avg_vote votes . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | 6.1 | 537 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | 5.9 | 171 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | 5.2 | 420 | . 3 tt0002130 | L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | 68 | 7.0 | 2019 | . 4 tt0002199 | From the Manger to the Cross; or, Jesus of Naz... | From the Manger to the Cross; or, Jesus of Naz... | 1912 | 1913 | Biography, Drama | 60 | 5.7 | 438 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 81268 tt9903716 | Jessie | Jessie | 2019 | 2019-03-15 | Horror, Thriller | 106 | 7.2 | 219 | . 81269 tt9905412 | Ottam | Ottam | 2019 | 2019-03-08 | Drama | 120 | 7.8 | 510 | . 81270 tt9905462 | Pengalila | Pengalila | 2019 | 2019-03-08 | Drama | 111 | 8.4 | 604 | . 81271 tt9911774 | Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | 130 | 8.4 | 369 | . 81272 tt9914286 | Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | 98 | 7.2 | 190 | . 81273 rows × 9 columns . # Reimporting the full dataframe from the CSV file. df = pd.read_csv(&#39;IMDb movies.csv&#39;) df.head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | NaN | NaN | NaN | NaN | 4.0 | 2.0 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | USA | English | Charles L. Gaskill | ... | Helen Gardner, Pearl Sindelar, Miss Fielding, ... | The fabled queen of Egypt&#39;s affair with Roman ... | 5.2 | 420 | $ 45000 | NaN | NaN | NaN | 24.0 | 3.0 | . 3 rows × 22 columns . The .fillna() method allows you to fill a Null value with a value of your choice. In the example below we fill Nulls with &#39;0&#39;. . We also use the &#39;inplace&#39; argument to change the dataframe without having to reassign it to df. . df[&#39;budget&#39;].fillna(0, inplace=True) df.head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | 0 | NaN | NaN | NaN | 4.0 | 2.0 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | USA | English | Charles L. Gaskill | ... | Helen Gardner, Pearl Sindelar, Miss Fielding, ... | The fabled queen of Egypt&#39;s affair with Roman ... | 5.2 | 420 | $ 45000 | NaN | NaN | NaN | 24.0 | 3.0 | . 3 rows × 22 columns .",
            "url": "https://sams101.github.io/DataScience/2020/06/07/Pandas-Basics.html",
            "relUrl": "/2020/06/07/Pandas-Basics.html",
            "date": " • Jun 7, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sams101.github.io/DataScience/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sams101.github.io/DataScience/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your page/pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sams101.github.io/DataScience/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sams101.github.io/DataScience/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
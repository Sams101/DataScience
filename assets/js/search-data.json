{
  
    
        "post0": {
            "title": "Genetic algo shakespeare",
            "content": "Million Monkey Generator . import pandas as pd import numpy as np import matplotlib.pyplot as plt import string import random import time # 1 Read in file filename= &#39;sonnet15.txt&#39; with open(filename) as file: ss = file.read() # number of characters in SS ss_length = len(ss) . Psuedo-code . 1: Read in shakespeare sonnet file as string . 2: Generate n strings of same length to SS string . 3: Measure difference between SS and each string - Diff is number of differences per string and SS . 4: Rank Strings by lowest diff . 5: Remove 50% highest diff . 6: Select 2 of each string . 7: split them at random index . 8: Join split strings and repeat for all children . 9: randoming change a value in each string . 10: compute diff between SS and new strings . 11: repeat process . 12: graph process . 13: visualise best string . # Generate n number of of child random strings with length SS def seed_population(pop_count): seed_population = [] text_combo = string.ascii_letters + string.punctuation + string.whitespace for num in range(pop_count): child = &#39;&#39;.join(random.choice(text_combo) for char in range(ss_length)) seed_population.append(child) seed_population = pd.DataFrame(seed_population) return seed_population # Calculate similiarity between each child and ss def child_score(child): child_score = 0 for char in range(ss_length): if child[char] == ss[char]: child_score += 1 return child_score # Create score list for all individuals in the population def population_score(seed_pop): pop_score = [] for n in range(pop_count): child = seed_pop.iloc[n,0] score = child_score(child) pop_score.append(score) return pop_score def fit_population(population, pop_score): # Filter population with values above mean pop_score = np.array(pop_score) # convert pop_score to numpy array pop_score_mean = pop_score.mean() # Calc mean value above_mean_filter = pop_score &gt; (pop_score_mean - 1) # Create boolean array based on filter above mean values fit_population = population[above_mean_filter] return fit_population # Mutate some genes in child chromosomes def mutate_child_chromosomes(chromosome_child, mutation_factor): rand_list_test = [] mutation_count = int(len(chromosome_child) * mutation_factor) # typical mutation_factor = 0.07 text_combo = string.ascii_letters + string.punctuation + string.whitespace for n in range(mutation_count): rand_gene = int(np.random.uniform(0, ss_length)) - 1 # index a random gene in the chromosome mutated_gene = random.choice(text_combo) # Generate random gene # Temp convert str -&gt; list -&gt; str chromosome_child_list = list(chromosome_child) chromosome_child_list[rand_gene] = mutated_gene mutated_chromosome_child = &#39;&#39;.join(chromosome_child_list) return mutated_chromosome_child # function to create new population from parents def generate_new_population(fit_population, mutation_factor): new_population = [] fit_pop_size = fit_population.size - 1 parent_len = ss_length - 1 for num in range(pop_count): rand1 = int(np.random.uniform(0,1) * fit_pop_size) rand2 = int(np.random.uniform(0,1) * fit_pop_size) rand3 = int(np.random.uniform(0,1) * fit_pop_size) parent1 = fit_population.iloc[rand1,0] parent2 = fit_population.iloc[rand2,0] # select point at random for crossover crossover_index = round(np.random.uniform(0,1) * parent_len) # Split parent chromosomes and generate new full population of children chromosome_child = &#39;&#39;.join([parent1[:crossover_index], parent2[crossover_index:]]) # Mutate chromosome chromosome_child = mutate_child_chromosomes(chromosome_child, mutation_factor) new_population.append(chromosome_child) new_population = pd.DataFrame(new_population) return new_population def progress_indicator(n, interval, score): if n % interval == 0: print(&#39;Generation:&#39;, n, &#39; Score:&#39;, round(score/len(ss) * 100)) # Check the best individual def check_best_individual(seed_pop, score_pop): max_value = score_pop.index(max(score_pop)) best_individual = seed_pop.iloc[max_value,0] return best_individual # Plot the pop average fittness per generation def plot_mean_score(plot_mean_score_gen): # Evolution Plot plt.plot(plot_mean_score_gen) plt.title(&#39;Increasing fittness with generation&#39;) plt.xlabel(&#39;Generations&#39;) plt.ylabel(&#39;Average Popopulation Score&#39;) plt.show() . Main program . # Create multiple generations gen_interval = 50 pop_count = 1000 generations = 5000 mutation_factor = 0.12 start_time = time.process_time() plot_mean_score_gen = [] seed_pop = seed_population(pop_count) for n in range(generations): # Check individual fittness across population score_pop = population_score(seed_pop) # Filter only fit indivudals and create new generation fit_individuals = fit_population(population=seed_pop, pop_score=score_pop) seed_pop = generate_new_population(fit_individuals, mutation_factor) # Create Plot mean_score_gen = sum(score_pop) / len(score_pop) plot_mean_score_gen.append(mean_score_gen) # Progress indicator progress_indicator(n, gen_interval, mean_score_gen) print(&#39;Generations: &#39;, generations, &#39; Population Size: &#39;, pop_count, &#39; Mutation rate: &#39;, mutation_factor ) # Create plot plot_mean_score(plot_mean_score_gen) print(round((time.process_time() - start_time)/60, 2), &quot;minutes&quot;) # Show best individual print(&#39; n--&#39;) print(&#39;This is the best indivdual out of&#39;, (pop_count * generations),&#39;individuals with&#39;, (max(score_pop)/len(ss) * 100), &#39;matching characters.&#39;) print(&#39;-- n&#39;) check_best_individual(seed_pop, score_pop) . Generation: 0 Score: 1 Generation: 50 Score: 12 Generation: 100 Score: 19 Generation: 150 Score: 26 Generation: 200 Score: 31 Generation: 250 Score: 35 Generation: 300 Score: 40 Generation: 350 Score: 45 Generation: 400 Score: 48 Generation: 450 Score: 52 Generation: 500 Score: 56 Generation: 550 Score: 59 Generation: 600 Score: 61 Generation: 650 Score: 64 Generation: 700 Score: 67 Generation: 750 Score: 69 Generation: 800 Score: 71 Generation: 850 Score: 73 Generation: 900 Score: 75 Generation: 950 Score: 77 Generation: 1000 Score: 79 Generation: 1050 Score: 81 Generation: 1100 Score: 82 Generation: 1150 Score: 84 Generation: 1200 Score: 85 Generation: 1250 Score: 86 Generation: 1300 Score: 86 Generation: 1350 Score: 87 Generation: 1400 Score: 88 Generation: 1450 Score: 88 Generation: 1500 Score: 88 Generation: 1550 Score: 90 Generation: 1600 Score: 90 Generation: 1650 Score: 91 Generation: 1700 Score: 91 Generation: 1750 Score: 92 Generation: 1800 Score: 93 Generation: 1850 Score: 93 Generation: 1900 Score: 94 Generation: 1950 Score: 94 Generation: 2000 Score: 94 Generation: 2050 Score: 94 Generation: 2100 Score: 95 Generation: 2150 Score: 95 Generation: 2200 Score: 95 Generation: 2250 Score: 96 Generation: 2300 Score: 96 Generation: 2350 Score: 96 Generation: 2400 Score: 96 Generation: 2450 Score: 96 Generation: 2500 Score: 96 Generation: 2550 Score: 96 Generation: 2600 Score: 96 Generation: 2650 Score: 97 Generation: 2700 Score: 97 Generation: 2750 Score: 97 Generation: 2800 Score: 97 Generation: 2850 Score: 97 Generation: 2900 Score: 97 Generation: 2950 Score: 97 Generation: 3000 Score: 97 Generation: 3050 Score: 98 Generation: 3100 Score: 98 Generation: 3150 Score: 98 Generation: 3200 Score: 98 Generation: 3250 Score: 98 Generation: 3300 Score: 98 Generation: 3350 Score: 98 Generation: 3400 Score: 98 Generation: 3450 Score: 98 Generation: 3500 Score: 98 Generation: 3550 Score: 98 Generation: 3600 Score: 98 Generation: 3650 Score: 98 Generation: 3700 Score: 98 Generation: 3750 Score: 98 Generation: 3800 Score: 98 Generation: 3850 Score: 98 Generation: 3900 Score: 98 Generation: 3950 Score: 98 Generation: 4000 Score: 98 Generation: 4050 Score: 98 Generation: 4100 Score: 98 Generation: 4150 Score: 98 Generation: 4200 Score: 98 Generation: 4250 Score: 98 Generation: 4300 Score: 98 Generation: 4350 Score: 98 Generation: 4400 Score: 98 Generation: 4450 Score: 98 Generation: 4500 Score: 98 Generation: 4550 Score: 98 Generation: 4600 Score: 98 Generation: 4650 Score: 98 Generation: 4700 Score: 98 Generation: 4750 Score: 98 Generation: 4800 Score: 98 Generation: 4850 Score: 98 Generation: 4900 Score: 98 Generation: 4950 Score: 98 Generations: 5000 Population Size: 1000 Mutation rate: 0.12 . . 111.47 minutes -- This is the best indivdual out of 5000000 individuals with 99.34747145187602 matching characters. -- &#39;When I Konsider every thing that grows nHolds in perfection but a little moment, nT=at this huge stage presenteth nought but shows nWhereon the stars in secret influence comment; nWhen I perceive that men asSplants increase, nCh,ered and checked even by the self-same sky, Vaunt in their youthfvl sap, at height decrease, nAnd wear their bVaXe state out of memory; nThen the conceit of this inconstant stay nSeXs you most rich in youth before my sight, nWhere wasteful Time debateth with decay nTo change your day of youth to sullied night, nAnd all in war with Time Kor love of you, nAs he takes from you, I elgraft you new.&#39; . evolved_text = check_best_individual(seed_pop, score_pop) . text_file = open(&quot;sample.txt&quot;, &quot;wt&quot;) n = text_file.write(evolved_text) text_file.close() . .",
            "url": "https://sams101.github.io/DataScience/2020/06/02/Genetic-Algo-Shakespeare.html",
            "relUrl": "/2020/06/02/Genetic-Algo-Shakespeare.html",
            "date": " • Jun 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sams101.github.io/DataScience/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sams101.github.io/DataScience/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your page/pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sams101.github.io/DataScience/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sams101.github.io/DataScience/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
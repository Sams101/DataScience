{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sams101.github.io/DataScience/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fire Effect",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Fire Effect n”, “ n”, “ n”, “ n”, “ n”, “The buffer starts with every pixel at 0. n”, “ n”, “Then at the bottom row, give a random value to each pixel, and keep changing the random values every frame. n”, “ n”, “Each frame, calculate each row of pixels based on the two rows below it: the value of each pixel, becomes the sum of the 3 pixels below it (one directly below it, one to the left of this one, and one to the right of this one), and one pixel directly two rows below it. n”, “ n”, “Then divide the sum by a value slightly larger than 4, so that the fire dies out as it rises. The larger the value you divide it by, the lower the flames can rise. n”, “ n”, “ n”, “Do this from top to bottom, if you do the calculations in the wrong order, some pixels will already be recalculated while other pixels that depend on them still have to be calculated. Each new frame may depend only on the values of the previous frame. The top of the screen has y-coordinate 0, and the bottom has y-coordinate h-1. n”, “ n”, “On the sides of the screen, the pixels have no neighbors to the left or right anymore, and to overcome this, the effect can be made circular so that the rightmost pixel has the leftmost pixel as its neighbor and vica versa. For this, modulo division through the width of the screen can be used on the x-coordinate of the neighbors. n”, “ n”, “The version of the effect here isn’t very fast at high resolutions, but there’s still set a maximum number of frames per second by using the waitFrame function, so that it won’t run too fast on faster computers in the future. n”, “ n”, “Because we have a fire buffer, we can use the drawBuffer function instead of drawing each pixel separately, which is much faster. The buffer that gets drawn isn’t the same as the fire array though, because that one has values from 0 to 256, which gives the wrong colors. Instead we create a new buffer and store the RGB color gotten from the palette in it, and then draw this buffer (which also has the name &quot;buffer&quot; here). n”, “ n”, “ n”, “### Reference: n”, “- https://lodev.org/cgtutor/fire.html n” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [], “source”: [ “import numpy as np n”, “import seaborn as sns n”, “from celluloid import Camera n”, “from IPython.display import HTML n”, “import matplotlib.pyplot as plt n”, “import time n” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [], “source”: [ “# Functions n”, “ n”, “# calculate individual particle n”, “def calc_particle_value(array, row, col, fourish): n”, “ ‘&#39;’Function to calculate value of current pixel based on two pixels directly below plus below left/right pixel. n”, “ Then divide sum of this by value slightly larger than 4’’‘ n”, “ # Two_below n”, “ if row+2 &gt; array.shape[0] - 1: n”, “ two_below = 0 n”, “ else: n”, “ two_below = array[row+2, col] n”, “ n”, “ # One_below n”, “ one_below = array[row+1,col] n”, “ n”, “ # One_below_left n”, “ one_below_left = array[row+1, col-1] n”, “ n”, “ # One_below_right n”, “ if col+1 &gt; array.shape[1] -1: n”, “ one_below_right = array[row+1, 0] n”, “ else: n”, “ one_below_right = array[row+1, col+1] n”, “ n”, “ summed_particles = two_below + one_below + one_below_left + one_below_right n”, “ particle_value = summed_particles / fourish n”, “ return particle_value n”, “ n”, “ n”, “# calculate particles in a row n”, “def calculate_row(array, row, col, fourish): n”, “ ‘’’ calculate values for a given row n”, “ ‘’‘ n”, “ array_width = array.shape[1] n”, “ for col in range(array_width): n”, “ array[row,col] = calc_particle_value(array, row, col, fourish) n”, “ return array” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “0 n” ] }, { “ename”: “NameError”, “evalue”: “name ‘col’ is not defined”, “output_type”: “error”, “traceback”: [ “ u001b[0;31m————————————————————————— u001b[0m”, “ u001b[0;31mNameError u001b[0m Traceback (most recent call last)”, “ u001b[0;32m u001b[0m in u001b[0;36m u001b[0;34m u001b[0m n u001b[1;32m 31 u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[1;32m 32 u001b[0m u001b[0;32mfor u001b[0m u001b[0mrow u001b[0m u001b[0;32min u001b[0m u001b[0mrange u001b[0m u001b[0;34m( u001b[0m u001b[0mrow_size u001b[0m u001b[0;34m- u001b[0m u001b[0;36m1 u001b[0m u001b[0;34m) u001b[0m u001b[0;34m: u001b[0m u001b[0;34m u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[0;32m&gt; 33 u001b[0;31m u001b[0mfire u001b[0m u001b[0;34m= u001b[0m u001b[0mcalculate_row u001b[0m u001b[0;34m( u001b[0m u001b[0mfire_array u001b[0m u001b[0;34m, u001b[0m u001b[0mrow u001b[0m u001b[0;34m, u001b[0m u001b[0mcol u001b[0m u001b[0;34m, u001b[0m u001b[0mfourish u001b[0m u001b[0;34m) u001b[0m u001b[0;34m u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[0m u001b[1;32m 34 u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[1;32m 35 u001b[0m u001b[0mfire_drop_bottom_rows u001b[0m u001b[0;34m= u001b[0m u001b[0mfire u001b[0m u001b[0;34m[ u001b[0m u001b[0;36m0 u001b[0m u001b[0;34m: u001b[0m u001b[0mrow_size u001b[0m u001b[0;34m- u001b[0m u001b[0;36m10 u001b[0m u001b[0;34m, u001b[0m u001b[0;34m: u001b[0m u001b[0;34m] u001b[0m u001b[0;34m u001b[0m u001b[0;34m u001b[0m u001b[0m n&quot;, &quot; u001b[0;31mNameError u001b[0m: name &#39;col&#39; is not defined&quot; ] }, { &quot;data&quot;: { &quot;text/plain&quot;: [ &quot;&lt;Figure size 432x288 with 0 Axes&gt;&quot; ] }, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;display_data&quot; } ], &quot;source&quot;: [ &quot;# Fire parameters n&quot;, &quot;iterations = 1000 n&quot;, &quot;row_size = 100 n&quot;, &quot;col_size = 400 n&quot;, &quot;fourish = 4.14 n&quot;, &quot; n&quot;, &quot; n&quot;, &quot;# Initialise an array n&quot;, &quot;bottom_row = row_size - 1 n&quot;, &quot;fire_array = np.zeros((row_size, col_size)) n&quot;, &quot;for i in range(col_size): n&quot;, &quot; fire_array[bottom_row, i] = np.random.uniform() n&quot;, &quot; n&quot;, &quot; n&quot;, &quot;# set up camera n&quot;, &quot;fig = plt.figure() n&quot;, &quot;camera = Camera(fig) n&quot;, &quot; n&quot;, &quot;time_list = [] n&quot;, &quot; n&quot;, &quot;# Calculate from top to bottom n&quot;, &quot;for i in range(iterations): n&quot;, &quot; n&quot;, &quot; # Start Timer n&quot;, &quot; start_time = time.process_time() n&quot;, &quot; n&quot;, &quot; if i % 100 == 0: n&quot;, &quot; print(i) n&quot;, &quot; n&quot;, &quot; fire_array[row_size -1,:] = abs(np.random.randn(1,col_size)) n&quot;, &quot; n&quot;, &quot; for row in range(row_size - 1): n&quot;, &quot; fire = calculate_row(fire_array, row, col, fourish) n&quot;, &quot; n&quot;, &quot; fire_drop_bottom_rows = fire[0:row_size - 10,:] n&quot;, &quot; n&quot;, &quot; plt.imshow(fire_drop_bottom_rows) n&quot;, &quot; plt.set_cmap(&#39;hot&#39;) n&quot;, &quot; plt.axis(&#39;off&#39;) n&quot;, &quot; n&quot;, &quot; camera.snap() n&quot;, &quot; n&quot;, &quot; # Calculate time and collect in list n&quot;, &quot; time_seconds = round(time.process_time() - start_time,2) n&quot;, &quot; time_list.append(time_seconds) n&quot;, &quot; n&quot;, &quot; n&quot;, &quot;# Generate Fire html5_video n&quot;, &quot;anim = camera.animate(blit=False) n&quot;, &quot;HTML(anim.to_html5_video())&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;# Time per iteration n&quot;, &quot;plt.plot(time_list)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 16, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;import numpy as np&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 24, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;tall = 10*10&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 25, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;small = 10*0.01&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 26, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;all = tall + small &quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 27, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/plain&quot;: [ &quot;5.005&quot; ] }, &quot;execution_count&quot;: 27, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;all/20&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 38, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;33 36 n&quot; ] } ], &quot;source&quot;: [ &quot;Ne_rate = round((5689 / 17280) * 100) n&quot;, &quot;Se_rate = round((3674 / 10230) * 100) n&quot;, &quot; n&quot;, &quot;print(Ne_rate, Se_rate)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Python 3&quot;, &quot;language&quot;: &quot;python&quot;, &quot;name&quot;: &quot;python3&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: { &quot;name&quot;: &quot;ipython&quot;, &quot;version&quot;: 3 }, &quot;file_extension&quot;: &quot;.py&quot;, &quot;mimetype&quot;: &quot;text/x-python&quot;, &quot;name&quot;: &quot;python&quot;, &quot;nbconvert_exporter&quot;: &quot;python&quot;, &quot;pygments_lexer&quot;: &quot;ipython3&quot;, &quot;version&quot;: &quot;3.7.6&quot; } }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 4 } .",
            "url": "https://sams101.github.io/DataScience/2020/01/28/Fire-effect.ipynb",
            "relUrl": "/2020/01/28/Fire-effect.ipynb",
            "date": " • Jan 28, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sams101.github.io/DataScience/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your page/pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sams101.github.io/DataScience/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sams101.github.io/DataScience/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
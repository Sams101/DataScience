{
  
    
        "post0": {
            "title": "02 Pandas",
            "content": "import pandas as pd . df = pd.read_csv(&#39;african_econ_crises.csv&#39;) . df.head() . case cc3 country year systemic_crisis exch_usd domestic_debt_in_default sovereign_external_debt_default gdp_weighted_default inflation_annual_cpi independence currency_crises inflation_crises banking_crisis . 0 1 | DZA | Algeria | 1870 | 1 | 0.052264 | 0 | 0 | 0.0 | 3.441456 | 0 | 0 | 0 | crisis | . 1 1 | DZA | Algeria | 1871 | 0 | 0.052798 | 0 | 0 | 0.0 | 14.149140 | 0 | 0 | 0 | no_crisis | . 2 1 | DZA | Algeria | 1872 | 0 | 0.052274 | 0 | 0 | 0.0 | -3.718593 | 0 | 0 | 0 | no_crisis | . 3 1 | DZA | Algeria | 1873 | 0 | 0.051680 | 0 | 0 | 0.0 | 11.203897 | 0 | 0 | 0 | no_crisis | . 4 1 | DZA | Algeria | 1874 | 0 | 0.051308 | 0 | 0 | 0.0 | -3.848561 | 0 | 0 | 0 | no_crisis | . df[&#39;country&#39;].nunique() . 13 . df[&#39;country&#39;].unique() . array([&#39;Algeria&#39;, &#39;Angola&#39;, &#39;Central African Republic&#39;, &#39;Ivory Coast&#39;, &#39;Egypt&#39;, &#39;Kenya&#39;, &#39;Mauritius&#39;, &#39;Morocco&#39;, &#39;Nigeria&#39;, &#39;South Africa&#39;, &#39;Tunisia&#39;, &#39;Zambia&#39;, &#39;Zimbabwe&#39;], dtype=object) . df.sort_values(&#39;inflation_annual_cpi&#39;, ascending=False).head(1) . case cc3 country year systemic_crisis exch_usd domestic_debt_in_default sovereign_external_debt_default gdp_weighted_default inflation_annual_cpi independence currency_crises inflation_crises banking_crisis . 1053 70 | ZWE | Zimbabwe | 2008 | 1 | 0.002 | 1 | 1 | 0.0 | 21989695.22 | 1 | 1 | 1 | crisis | . df[(df[&#39;country&#39;] == &#39;Kenya&#39;) &amp; (df[&#39;systemic_crisis&#39;] == 1)].sort_values(&#39;year&#39;) . case cc3 country year systemic_crisis exch_usd domestic_debt_in_default sovereign_external_debt_default gdp_weighted_default inflation_annual_cpi independence currency_crises inflation_crises banking_crisis . 475 35 | KEN | Kenya | 1985 | 1 | 16.2843 | 0 | 0 | 0.0 | 11.398 | 1 | 0 | 0 | crisis | . 476 35 | KEN | Kenya | 1986 | 1 | 16.0422 | 0 | 0 | 0.0 | 10.284 | 1 | 0 | 0 | crisis | . 477 35 | KEN | Kenya | 1987 | 1 | 16.5149 | 0 | 0 | 0.0 | 13.007 | 1 | 0 | 0 | crisis | . 478 35 | KEN | Kenya | 1988 | 1 | 18.5994 | 0 | 0 | 0.0 | 4.804 | 1 | 0 | 0 | crisis | . 479 35 | KEN | Kenya | 1989 | 1 | 21.6010 | 0 | 0 | 0.0 | 7.617 | 1 | 1 | 0 | no_crisis | . 482 35 | KEN | Kenya | 1992 | 1 | 36.2163 | 0 | 0 | 0.0 | 27.332 | 1 | 1 | 1 | crisis | . 483 35 | KEN | Kenya | 1993 | 1 | 68.1631 | 0 | 0 | 0.0 | 45.979 | 1 | 1 | 1 | crisis | . 484 35 | KEN | Kenya | 1994 | 1 | 44.8389 | 0 | 1 | 0.0 | 28.814 | 1 | 0 | 1 | crisis | . 485 35 | KEN | Kenya | 1995 | 1 | 55.9389 | 0 | 1 | 0.0 | 1.554 | 1 | 0 | 0 | crisis | . 486 35 | KEN | Kenya | 1996 | 1 | 55.0211 | 0 | 1 | 0.0 | 8.862 | 1 | 0 | 0 | no_crisis | . 487 35 | KEN | Kenya | 1997 | 1 | 62.6778 | 0 | 1 | 0.0 | 11.924 | 1 | 0 | 0 | no_crisis | . 488 35 | KEN | Kenya | 1998 | 1 | 61.9056 | 0 | 1 | 0.0 | 6.716 | 1 | 0 | 0 | no_crisis | . 489 35 | KEN | Kenya | 1999 | 1 | 72.9306 | 0 | 0 | 0.0 | 5.753 | 1 | 1 | 0 | no_crisis | . crisis = df[df[&#39;systemic_crisis&#39;]==1] crisis.groupby(&#39;country&#39;).count()[&#39;systemic_crisis&#39;] . country Algeria 4 Central African Republic 19 Egypt 6 Ivory Coast 4 Kenya 13 Morocco 2 Nigeria 10 Tunisia 5 Zambia 4 Zimbabwe 15 Name: systemic_crisis, dtype: int64 . len(df[ (df[&#39;country&#39;] == &#39;Zimbabwe&#39;) &amp; (df[&#39;sovereign_external_debt_default&#39;]==1)]) . 30 . df[df[&#39;country&#39;]==&#39;Algeria&#39;].sort_values(&#39;exch_usd&#39;, ascending=False) . case cc3 country year systemic_crisis exch_usd domestic_debt_in_default sovereign_external_debt_default gdp_weighted_default inflation_annual_cpi independence currency_crises inflation_crises banking_crisis . 84 1 | DZA | Algeria | 2014 | 0 | 87.970698 | 0 | 0 | 0.0 | 2.917000 | 1 | 0 | 0 | no_crisis | . 72 1 | DZA | Algeria | 2002 | 0 | 79.723400 | 0 | 0 | 0.0 | 1.430000 | 1 | 0 | 0 | no_crisis | . 83 1 | DZA | Algeria | 2013 | 0 | 78.148701 | 0 | 0 | 0.0 | 3.255000 | 1 | 0 | 0 | no_crisis | . 82 1 | DZA | Algeria | 2012 | 0 | 78.102500 | 0 | 0 | 0.0 | 8.916000 | 1 | 0 | 0 | no_crisis | . 71 1 | DZA | Algeria | 2001 | 0 | 77.819600 | 0 | 0 | 0.0 | 4.200000 | 1 | 0 | 0 | no_crisis | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 6 1 | DZA | Algeria | 1876 | 0 | 0.051867 | 0 | 0 | 0.0 | -1.769547 | 0 | 0 | 0 | no_crisis | . 3 1 | DZA | Algeria | 1873 | 0 | 0.051680 | 0 | 0 | 0.0 | 11.203897 | 0 | 0 | 0 | no_crisis | . 5 1 | DZA | Algeria | 1875 | 0 | 0.051546 | 0 | 0 | 0.0 | -20.924178 | 0 | 0 | 0 | no_crisis | . 4 1 | DZA | Algeria | 1874 | 0 | 0.051308 | 0 | 0 | 0.0 | -3.848561 | 0 | 0 | 0 | no_crisis | . 12 1 | DZA | Algeria | 1882 | 0 | 0.050761 | 0 | 0 | 0.0 | -12.356127 | 0 | 0 | 0 | no_crisis | . 85 rows × 14 columns . DataFrames . import pandas as pd import numpy as np . columns = [&#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;] index = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;d&#39;,&#39;E&#39;] . np.random.seed(42) data = np.random.randint(-100, 100, (5,4)) data . array([[ 2, 79, -8, -86], [ 6, -29, 88, -80], [ 2, 21, -26, -13], [ 16, -1, 3, 51], [ 30, 49, -48, -99]]) . df = pd.DataFrame(data, index= index, columns=columns ) df . W X Y Z . A 2 | 79 | -8 | -86 | . B 6 | -29 | 88 | -80 | . C 2 | 21 | -26 | -13 | . d 16 | -1 | 3 | 51 | . E 30 | 49 | -48 | -99 | . df[&#39;W&#39;] . A 2 B 6 C 2 d 16 E 30 Name: W, dtype: int64 . df[[&#39;W&#39;, &#39;Z&#39;]] . W Z . A 2 | -86 | . B 6 | -80 | . C 2 | -13 | . d 16 | 51 | . E 30 | -99 | . type(df[&#39;W&#39;]) . pandas.core.series.Series . df[&#39;new&#39;] = df[&#39;W&#39;] + df[&#39;Y&#39;] df . W X Y Z new . A 2 | 79 | -8 | -86 | -6 | . B 6 | -29 | 88 | -80 | 94 | . C 2 | 21 | -26 | -13 | -24 | . d 16 | -1 | 3 | 51 | 19 | . E 30 | 49 | -48 | -99 | -18 | . df.drop(&#39;new&#39;, axis=1) df . W X Y Z new . A 2 | 79 | -8 | -86 | -6 | . B 6 | -29 | 88 | -80 | 94 | . C 2 | 21 | -26 | -13 | -24 | . d 16 | -1 | 3 | 51 | 19 | . E 30 | 49 | -48 | -99 | -18 | . df = df.drop(&#39;new&#39;, axis=1) df . W X Y Z . A 2 | 79 | -8 | -86 | . B 6 | -29 | 88 | -80 | . C 2 | 21 | -26 | -13 | . d 16 | -1 | 3 | 51 | . E 30 | 49 | -48 | -99 | . df.loc[&#39;A&#39;] . W 2 X 79 Y -8 Z -86 Name: A, dtype: int64 . df.loc[[&#39;A&#39;, &#39;C&#39;]] . W X Y Z . A 2 | 79 | -8 | -86 | . C 2 | 21 | -26 | -13 | . df.iloc[0] . W 2 X 79 Y -8 Z -86 Name: A, dtype: int64 . df.iloc[0:2] . W X Y Z . A 2 | 79 | -8 | -86 | . B 6 | -29 | 88 | -80 | . df.drop(&#39;C&#39;, axis=0) . W X Y Z . A 2 | 79 | -8 | -86 | . B 6 | -29 | 88 | -80 | . d 16 | -1 | 3 | 51 | . E 30 | 49 | -48 | -99 | . df.loc[[&#39;A&#39;, &#39;C&#39;], [&#39;W&#39;, &#39;Y&#39;]] . W Y . A 2 | -8 | . C 2 | -26 | . df . W X Y Z . A 2 | 79 | -8 | -86 | . B 6 | -29 | 88 | -80 | . C 2 | 21 | -26 | -13 | . d 16 | -1 | 3 | 51 | . E 30 | 49 | -48 | -99 | . df &gt; 0 . W X Y Z . A True | True | False | False | . B True | False | True | False | . C True | True | False | False | . d True | False | True | True | . E True | True | False | False | . df[df &gt; 0 ] . W X Y Z x . A 2 | 79.0 | NaN | NaN | NaN | . B 6 | NaN | 88.0 | NaN | NaN | . C 2 | 21.0 | NaN | NaN | NaN | . d 16 | NaN | 3.0 | 51.0 | NaN | . E 30 | 49.0 | NaN | NaN | NaN | . df[&#39;X&#39;] &gt; 0 . A True B False C True d False E True Name: X, dtype: bool . df[df[&#39;X&#39;] &gt; 0] . df[df[&#39;X&#39;] &gt; 0][&#39;Y&#39;] . A -8 C -26 E -48 Name: Y, dtype: int64 . df[df[&#39;X&#39;] &gt; 0 ][[&#39;X&#39;, &#39;Z&#39;]] . X Z . A 79 | -86 | . C 21 | -13 | . E 49 | -99 | . df[(df[&#39;W&#39;]&gt;0) &amp; (df[&#39;Y&#39;] &gt; 1)] . W X Y Z x . B 6 | -29 | 88 | -80 | 0 | . d 16 | -1 | 3 | 51 | 0 | . df . W X Y Z x . A 2 | 79 | -8 | -86 | 0 | . B 6 | -29 | 88 | -80 | 0 | . C 2 | 21 | -26 | -13 | 0 | . d 16 | -1 | 3 | 51 | 0 | . E 30 | 49 | -48 | -99 | 0 | . df.reset_index() . index W X Y Z x . 0 A | 2 | 79 | -8 | -86 | 0 | . 1 B | 6 | -29 | 88 | -80 | 0 | . 2 C | 2 | 21 | -26 | -13 | 0 | . 3 d | 16 | -1 | 3 | 51 | 0 | . 4 E | 30 | 49 | -48 | -99 | 0 | . newind = &#39;CA NY WY OR CO&#39;.split() newind . [&#39;CA&#39;, &#39;NY&#39;, &#39;WY&#39;, &#39;OR&#39;, &#39;CO&#39;] . df[&#39;States&#39;] = newind . df . W X Y Z x States . States . CA 2 | 79 | -8 | -86 | 0 | CA | . NY 6 | -29 | 88 | -80 | 0 | NY | . WY 2 | 21 | -26 | -13 | 0 | WY | . OR 16 | -1 | 3 | 51 | 0 | OR | . CO 30 | 49 | -48 | -99 | 0 | CO | . df.set_index(&#39;States&#39;) . W X Y Z x . States . CA 2 | 79 | -8 | -86 | 0 | . NY 6 | -29 | 88 | -80 | 0 | . WY 2 | 21 | -26 | -13 | 0 | . OR 16 | -1 | 3 | 51 | 0 | . CO 30 | 49 | -48 | -99 | 0 | . df . W X Y Z x States . States . CA 2 | 79 | -8 | -86 | 0 | CA | . NY 6 | -29 | 88 | -80 | 0 | NY | . WY 2 | 21 | -26 | -13 | 0 | WY | . OR 16 | -1 | 3 | 51 | 0 | OR | . CO 30 | 49 | -48 | -99 | 0 | CO | . df = df.set_index(&#39;States&#39;) df . W X Y Z x . States . CA 2 | 79 | -8 | -86 | 0 | . NY 6 | -29 | 88 | -80 | 0 | . WY 2 | 21 | -26 | -13 | 0 | . OR 16 | -1 | 3 | 51 | 0 | . CO 30 | 49 | -48 | -99 | 0 | . df.describe() . W X Y Z x . count 5.00000 | 5.000000 | 5.000000 | 5.000000 | 5.0 | . mean 11.20000 | 23.800000 | 1.800000 | -45.400000 | 0.0 | . std 11.96662 | 42.109381 | 51.915316 | 63.366395 | 0.0 | . min 2.00000 | -29.000000 | -48.000000 | -99.000000 | 0.0 | . 25% 2.00000 | -1.000000 | -26.000000 | -86.000000 | 0.0 | . 50% 6.00000 | 21.000000 | -8.000000 | -80.000000 | 0.0 | . 75% 16.00000 | 49.000000 | 3.000000 | -13.000000 | 0.0 | . max 30.00000 | 79.000000 | 88.000000 | 51.000000 | 0.0 | . df.dtypes . W int64 X int64 Y int64 Z int64 x int64 dtype: object . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 5 entries, CA to CO Data columns (total 5 columns): # Column Non-Null Count Dtype -- -- 0 W 5 non-null int64 1 X 5 non-null int64 2 Y 5 non-null int64 3 Z 5 non-null int64 4 x 5 non-null int64 dtypes: int64(5) memory usage: 240.0+ bytes . Missing Data . import pandas as pd df = pd.DataFrame({&#39;A&#39;: [1, 2, np.nan, 4], &#39;B&#39;: [5, np.nan, np.nan, 8], &#39;C&#39;: [10, 20, 30, 40 ]}) df . A B C . 0 1.0 | 5.0 | 10 | . 1 2.0 | NaN | 20 | . 2 NaN | NaN | 30 | . 3 4.0 | 8.0 | 40 | . df.dropna() . A B C . 0 1.0 | 5.0 | 10 | . 3 4.0 | 8.0 | 40 | . df.dropna(axis=1) . C . 0 10 | . 1 20 | . 2 30 | . 3 40 | . df.dropna(thresh = 2) . A B C . 0 1.0 | 5.0 | 10 | . 1 2.0 | NaN | 20 | . 3 4.0 | 8.0 | 40 | . df.fillna(value = &#39;Fill Value&#39;) . A B C . 0 1 | 5 | 10 | . 1 2 | Fill Value | 20 | . 2 Fill Value | Fill Value | 30 | . 3 4 | 8 | 40 | . df[&#39;A&#39;].fillna(value = 0) . 0 1.0 1 2.0 2 0.0 3 4.0 Name: A, dtype: float64 . df[&#39;A&#39;].fillna(df[&#39;A&#39;].mean()) . 0 1.000000 1 2.000000 2 2.333333 3 4.000000 Name: A, dtype: float64 . df.fillna(df.mean()) . A B C . 0 1.000000 | 5.0 | 10 | . 1 2.000000 | 6.5 | 20 | . 2 2.333333 | 6.5 | 30 | . 3 4.000000 | 8.0 | 40 | . Groupby . import pandas as pd . df = pd.read_csv(&#39;Universities.csv&#39;) . df.head() . Sector University Year Completions Geography . 0 Private for-profit, 2-year | Pima Medical Institute-Las Vegas | 2016 | 591 | Nevada | . 1 Private for-profit, less-than 2-year | Healthcare Preparatory Institute | 2016 | 28 | Nevada | . 2 Private for-profit, less-than 2-year | Milan Institute-Las Vegas | 2016 | 408 | Nevada | . 3 Private for-profit, less-than 2-year | Utah College of Massage Therapy-Vegas | 2016 | 240 | Nevada | . 4 Public, 4-year or above | Western Nevada College | 2016 | 960 | Nevada | . # Step 1 simply returns a special groupby object waiting to have an aggregate method called on it! df.groupby(&#39;Year&#39;) . &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fa2eddab750&gt; . df.groupby(&#39;Year&#39;).mean() . Completions . Year . 2012 535.078947 | . 2013 526.150000 | . 2014 588.809524 | . 2015 597.250000 | . 2016 609.860465 | . type(df.groupby(&#39;Year&#39;).mean()) . pandas.core.frame.DataFrame . df.groupby(&#39;Year&#39;).mean().sort_index(ascending=False) . Completions . Year . 2016 609.860465 | . 2015 597.250000 | . 2014 588.809524 | . 2013 526.150000 | . 2012 535.078947 | . df.groupby(&#39;Year&#39;).mad() . Completions . Year . 2012 542.655125 | . 2013 560.455000 | . 2014 652.596372 | . 2015 661.863636 | . 2016 699.015684 | . df.groupby(&#39;Year&#39;).median() . Completions . Year . 2012 229.5 | . 2013 189.0 | . 2014 203.5 | . 2015 191.0 | . 2016 208.0 | . df.groupby(&#39;Year&#39;).std() . Completions . Year . 2012 1036.433239 | . 2013 1040.474782 | . 2014 1150.355857 | . 2015 1183.371791 | . 2016 1235.952796 | . df.groupby(&#39;Year&#39;).skew() . Completions . Year . 2012 3.682215 | . 2013 3.483705 | . 2014 3.101389 | . 2015 3.142177 | . 2016 3.074736 | . df.groupby(&#39;Year&#39;).var() . Completions . Year . 2012 1.074194e+06 | . 2013 1.082588e+06 | . 2014 1.323319e+06 | . 2015 1.400369e+06 | . 2016 1.527579e+06 | . df.head() . Sector University Year Completions Geography . 0 Private for-profit, 2-year | Pima Medical Institute-Las Vegas | 2016 | 591 | Nevada | . 1 Private for-profit, less-than 2-year | Healthcare Preparatory Institute | 2016 | 28 | Nevada | . 2 Private for-profit, less-than 2-year | Milan Institute-Las Vegas | 2016 | 408 | Nevada | . 3 Private for-profit, less-than 2-year | Utah College of Massage Therapy-Vegas | 2016 | 240 | Nevada | . 4 Public, 4-year or above | Western Nevada College | 2016 | 960 | Nevada | . df.groupby([&#39;Year&#39;, &#39;Sector&#39;]).mean() . Completions . Year Sector . 2012 Private for-profit, 2-year 204.800000 | . Private for-profit, 4-year or above 158.000000 | . Private for-profit, less-than 2-year 189.571429 | . Private not-for-profit, 2-year 332.500000 | . Private not-for-profit, 4-year or above 353.000000 | . Public, 2-year 1170.000000 | . Public, 4-year or above 2068.000000 | . 2013 Private for-profit, 2-year 190.812500 | . Private for-profit, 4-year or above 155.000000 | . Private for-profit, less-than 2-year 183.000000 | . Private not-for-profit, 2-year 235.500000 | . Private not-for-profit, 4-year or above 338.666667 | . Public, 2-year 1633.000000 | . Public, 4-year or above 2136.166667 | . 2014 Private for-profit, 2-year 184.812500 | . Private for-profit, 4-year or above 251.000000 | . Private for-profit, less-than 2-year 166.000000 | . Private not-for-profit, 2-year 224.500000 | . Private not-for-profit, 4-year or above 347.333333 | . Public, 2-year 2286.000000 | . Public, 4-year or above 2527.000000 | . 2015 Private for-profit, 2-year 205.000000 | . Private for-profit, 4-year or above 163.250000 | . Private for-profit, less-than 2-year 203.625000 | . Private not-for-profit, 2-year 212.500000 | . Private not-for-profit, 4-year or above 409.333333 | . Public, 2-year 2355.000000 | . Public, 4-year or above 2676.000000 | . 2016 Private for-profit, 2-year 205.375000 | . Private for-profit, 4-year or above 124.666667 | . Private for-profit, less-than 2-year 194.000000 | . Private not-for-profit, 2-year 161.000000 | . Private not-for-profit, 4-year or above 302.000000 | . Public, 2-year 2431.000000 | . Public, 4-year or above 2779.500000 | . df.groupby(&#39;Year&#39;).describe() . Completions . count mean std min 25% 50% 75% max . Year . 2012 38.0 | 535.078947 | 1036.433239 | 13.0 | 114.25 | 229.5 | 420.50 | 5388.0 | . 2013 40.0 | 526.150000 | 1040.474782 | 0.0 | 98.50 | 189.0 | 413.00 | 5278.0 | . 2014 42.0 | 588.809524 | 1150.355857 | 0.0 | 104.50 | 203.5 | 371.75 | 5093.0 | . 2015 44.0 | 597.250000 | 1183.371791 | 0.0 | 87.75 | 191.0 | 405.75 | 5335.0 | . 2016 43.0 | 609.860465 | 1235.952796 | 0.0 | 90.00 | 208.0 | 414.00 | 5367.0 | . df.groupby(&#39;Year&#39;).describe().transpose() . Year 2012 2013 2014 2015 2016 . Completions count 38.000000 | 40.000000 | 42.000000 | 44.000000 | 43.000000 | . mean 535.078947 | 526.150000 | 588.809524 | 597.250000 | 609.860465 | . std 1036.433239 | 1040.474782 | 1150.355857 | 1183.371791 | 1235.952796 | . min 13.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 114.250000 | 98.500000 | 104.500000 | 87.750000 | 90.000000 | . 50% 229.500000 | 189.000000 | 203.500000 | 191.000000 | 208.000000 | . 75% 420.500000 | 413.000000 | 371.750000 | 405.750000 | 414.000000 | . max 5388.000000 | 5278.000000 | 5093.000000 | 5335.000000 | 5367.000000 | . Data Input/Output . pwd . &#39;/Users/samtreacy/OneDrive - TietoEVRY/00_Analysis/Jupyter/Tensorflow_Cert/Summaries_to_Study&#39; . ls . 01 Numpy.ipynb Universities.csv example.csv 02 Pandas.ipynb african_econ_crises.csv output.csv Excel_Sample.xlsx bank.csv . df = pd.read_csv(&#39;example.csv&#39;) df . a b c d . 0 0 | 1 | 2 | 3 | . 1 4 | 5 | 6 | 7 | . 2 8 | 9 | 10 | 11 | . 3 12 | 13 | 14 | 15 | . df.to_csv(&#39;example.csv&#39;, index=False) . wiki = pd.read_html(&#39;https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)&#39;) . wiki[7] . Rank Country/Territory GDP(US$million) . 0 NaN | World[19] | 87265226 | . 1 1 | United States | 21439453 | . 2 — | European Union[22][n 1] | 18705132 | . 3 2 | China[n 2] | 14140163 | . 4 3 | Japan | 5154475 | . ... ... | ... | ... | . 189 182 | Palau | 291 | . 190 183 | Marshall Islands | 220 | . 191 184 | Kiribati | 184 | . 192 185 | Nauru | 108 | . 193 186 | Tuvalu | 42 | . 194 rows × 3 columns . tables = pd.read_html(&#39;http://www.fdic.gov/bank/individual/failed/banklist.html&#39;) . tables[0].head() . Bank Name City ST CERT Acquiring Institution Closing Date . 0 The First State Bank | Barboursville | WV | 14361 | MVB Bank, Inc. | April 3, 2020 | . 1 Ericson State Bank | Ericson | NE | 18265 | Farmers and Merchants Bank | February 14, 2020 | . 2 City National Bank of New Jersey | Newark | NJ | 21111 | Industrial Bank | November 1, 2019 | . 3 Resolute Bank | Maumee | OH | 58317 | Buckeye State Bank | October 25, 2019 | . 4 Louisa Community Bank | Louisa | KY | 58112 | Kentucky Farmers Bank Corporation | October 25, 2019 | . Operations . import pandas as pd df_one = pd.DataFrame({&#39;k1&#39;:[&#39;A&#39;,&#39;A&#39;,&#39;B&#39;,&#39;B&#39;,&#39;C&#39;,&#39;C&#39;], &#39;col1&#39;:[100,200,300,300,400,500], &#39;col2&#39;:[&#39;NY&#39;,&#39;CA&#39;,&#39;WA&#39;,&#39;WA&#39;,&#39;AK&#39;,&#39;NV&#39;]}) . df_one . k1 col1 col2 . 0 A | 100 | NY | . 1 A | 200 | CA | . 2 B | 300 | WA | . 3 B | 300 | WA | . 4 C | 400 | AK | . 5 C | 500 | NV | . df_one[&#39;col2&#39;].unique() . array([&#39;NY&#39;, &#39;CA&#39;, &#39;WA&#39;, &#39;AK&#39;, &#39;NV&#39;], dtype=object) . df_one[&#39;col2&#39;].nunique() . 5 . df_one[&#39;col2&#39;].value_counts() . WA 2 CA 1 AK 1 NY 1 NV 1 Name: col2, dtype: int64 . df_one.drop_duplicates() . k1 col1 col2 . 0 A | 100 | NY | . 1 A | 200 | CA | . 2 B | 300 | WA | . 4 C | 400 | AK | . 5 C | 500 | NV | . df_one[&#39;New Col&#39;] = df_one[&#39;col1&#39;] * 10 df_one . k1 col1 col2 New Col . 0 A | 100 | NY | 1000 | . 1 A | 200 | CA | 2000 | . 2 B | 300 | WA | 3000 | . 3 B | 300 | WA | 3000 | . 4 C | 400 | AK | 4000 | . 5 C | 500 | NV | 5000 | . def grab_first_letter(state): return state[0] . grab_first_letter(&#39;NY&#39;) . &#39;N&#39; . df_one[&#39;col2&#39;].apply(grab_first_letter) . 0 N 1 C 2 W 3 W 4 A 5 N Name: col2, dtype: object . df_one[&#39;first letter&#39;] = df_one[&#39;col2&#39;].apply(grab_first_letter) . df_one . k1 col1 col2 New Col first letter . 0 A | 100 | NY | 1000 | N | . 1 A | 200 | CA | 2000 | C | . 2 B | 300 | WA | 3000 | W | . 3 B | 300 | WA | 3000 | W | . 4 C | 400 | AK | 4000 | A | . 5 C | 500 | NV | 5000 | N | . import pandas as pd df = pd.read_csv(&#39;african_econ_crises.csv&#39;) . df[&#39;country&#39;].nunique() . 13 . df[(df[&#39;country&#39;]==&#39;Kenya&#39;) &amp; (df[&#39;systemic_crisis&#39;]==1)].sort_values(&#39;year&#39;) . case cc3 country year systemic_crisis exch_usd domestic_debt_in_default sovereign_external_debt_default gdp_weighted_default inflation_annual_cpi independence currency_crises inflation_crises banking_crisis . 475 35 | KEN | Kenya | 1985 | 1 | 16.2843 | 0 | 0 | 0.0 | 11.398 | 1 | 0 | 0 | crisis | . 476 35 | KEN | Kenya | 1986 | 1 | 16.0422 | 0 | 0 | 0.0 | 10.284 | 1 | 0 | 0 | crisis | . 477 35 | KEN | Kenya | 1987 | 1 | 16.5149 | 0 | 0 | 0.0 | 13.007 | 1 | 0 | 0 | crisis | . 478 35 | KEN | Kenya | 1988 | 1 | 18.5994 | 0 | 0 | 0.0 | 4.804 | 1 | 0 | 0 | crisis | . 479 35 | KEN | Kenya | 1989 | 1 | 21.6010 | 0 | 0 | 0.0 | 7.617 | 1 | 1 | 0 | no_crisis | . 482 35 | KEN | Kenya | 1992 | 1 | 36.2163 | 0 | 0 | 0.0 | 27.332 | 1 | 1 | 1 | crisis | . 483 35 | KEN | Kenya | 1993 | 1 | 68.1631 | 0 | 0 | 0.0 | 45.979 | 1 | 1 | 1 | crisis | . 484 35 | KEN | Kenya | 1994 | 1 | 44.8389 | 0 | 1 | 0.0 | 28.814 | 1 | 0 | 1 | crisis | . 485 35 | KEN | Kenya | 1995 | 1 | 55.9389 | 0 | 1 | 0.0 | 1.554 | 1 | 0 | 0 | crisis | . 486 35 | KEN | Kenya | 1996 | 1 | 55.0211 | 0 | 1 | 0.0 | 8.862 | 1 | 0 | 0 | no_crisis | . 487 35 | KEN | Kenya | 1997 | 1 | 62.6778 | 0 | 1 | 0.0 | 11.924 | 1 | 0 | 0 | no_crisis | . 488 35 | KEN | Kenya | 1998 | 1 | 61.9056 | 0 | 1 | 0.0 | 6.716 | 1 | 0 | 0 | no_crisis | . 489 35 | KEN | Kenya | 1999 | 1 | 72.9306 | 0 | 0 | 0.0 | 5.753 | 1 | 1 | 0 | no_crisis | .",
            "url": "https://sams101.github.io/DataScience/2020/10/02/Pandas.html",
            "relUrl": "/2020/10/02/Pandas.html",
            "date": " • Oct 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sams101.github.io/DataScience/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your page/pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sams101.github.io/DataScience/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sams101.github.io/DataScience/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
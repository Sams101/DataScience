{
  
    
        "post0": {
            "title": "Pandas Basics - Level 0",
            "content": "This notebook will get you to a point where you can quickly explore and manipulate a dataset. . If you would like to replicate the exercises below, just download the following IMDb movies.csv from Kaggle here. If you don&#39;t have a Kaggle account you will need to create one first to download the file. . Importing modules . Let&#39;s start by loading the Pandas module using import pandas. To save time when calling the module we can load it using the alias &quot;pd&quot; by using the as command. This means you only need to use the following pattern when calling a pandas function pd.function(..). . import pandas as pd . The dataset is formatted as CSV so we need to call the .read_csv(..) function. If it was saved as an Excel file we could use the .read_excel(..) function instead. . df = pd.read_csv(&#39;IMDb movies.csv&#39;) . Viewing Data . Let&#39;s view the data. Use the .head(..) method to view the first rows of data. If you pass a value in, in this case 2, then only the first 2 rows will be selected. . df.head(2) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | NaN | NaN | NaN | NaN | 4.0 | 2.0 | . 2 rows × 22 columns . Use the .tail(..) method to view the last rows of data. If you pass a value in, in this case 2, then only the last 2 rows will be selected. . df.tail(2) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 81271 tt9911774 | Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | 130 | India | Malayalam | Vineesh Aaradya | ... | Anoop Chandran, Indrans, Sona Nair, Simon Brit... | NaN | 8.4 | 369 | NaN | NaN | NaN | NaN | NaN | NaN | . 81272 tt9914286 | Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | 98 | Turkey | Turkish | Ahmet Faik Akinci | ... | Ahmet Faik Akinci, Belma Mamati, Metin Keçeci,... | NaN | 7.2 | 190 | NaN | NaN | $ 2833 | NaN | NaN | NaN | . 2 rows × 22 columns . Get Dataframe information . You can use the .shape method to check the dimension of the dataframe. In the example below we see there are 81273 rows and 22 columns. . Note this and the .size method below do not have a trailing parentheses. . df.shape . (81273, 22) . The .size method returns the number of cells in the dataframe i.e. number of rows by columns. . df.size . 1788006 . The .info(..) method is very useful as you can simultaneously check the names of each column, how many values are not null per column, and their datatype. . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 81273 entries, 0 to 81272 Data columns (total 22 columns): # Column Non-Null Count Dtype -- -- 0 imdb_title_id 81273 non-null object 1 title 81273 non-null object 2 original_title 81273 non-null object 3 year 81273 non-null int64 4 date_published 81273 non-null object 5 genre 81273 non-null object 6 duration 81273 non-null int64 7 country 81234 non-null object 8 language 80518 non-null object 9 director 81200 non-null object 10 writer 79780 non-null object 11 production_company 76948 non-null object 12 actors 81207 non-null object 13 description 78843 non-null object 14 avg_vote 81273 non-null float64 15 votes 81273 non-null int64 16 budget 22804 non-null object 17 usa_gross_income 15094 non-null object 18 worlwide_gross_income 29892 non-null object 19 metascore 12722 non-null float64 20 reviews_from_users 74196 non-null float64 21 reviews_from_critics 70286 non-null float64 dtypes: float64(4), int64(3), object(15) memory usage: 13.6+ MB . Use the following command to create a list of all column names. . df.columns.to_list() . [&#39;imdb_title_id&#39;, &#39;title&#39;, &#39;original_title&#39;, &#39;year&#39;, &#39;date_published&#39;, &#39;genre&#39;, &#39;duration&#39;, &#39;country&#39;, &#39;language&#39;, &#39;director&#39;, &#39;writer&#39;, &#39;production_company&#39;, &#39;actors&#39;, &#39;description&#39;, &#39;avg_vote&#39;, &#39;votes&#39;, &#39;budget&#39;, &#39;usa_gross_income&#39;, &#39;worlwide_gross_income&#39;, &#39;metascore&#39;, &#39;reviews_from_users&#39;, &#39;reviews_from_critics&#39;] . Use .value_counts(..) to quickly check the number of occurrences of each value in a column. . Note: The values themselves (e.g. 2017, 2016, ...) are returned in the index of a new data object. . df[&#39;year&#39;].value_counts() . 2017 3106 2016 3033 2015 2903 2018 2880 2014 2851 ... 1915 21 1913 13 1912 5 1911 4 1906 1 Name: year, Length: 110, dtype: int64 . Sorting Values . You can sort column values either alphabetically or numerically by using the .sort_values(..) method. . Note: By default values will be sorted in ascending order. . df[&#39;year&#39;].sort_values() . 0 1906 34547 1911 3 1911 38007 1911 1 1911 ... 78770 2019 78735 2019 78707 2019 78856 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . Pass ascending=False into the .sort_values(..) method and values will be sorted in descending order. . df[&#39;year&#39;].sort_values(ascending=False) . 81272 2019 78856 2019 78707 2019 78735 2019 78770 2019 ... 1 1911 38007 1911 3 1911 34547 1911 0 1906 Name: year, Length: 81273, dtype: int64 . You can sort the dataframe based on more than one column. Just pass the names of the columns into the .sort_values(..) method as a list. You can independently sort the values by also passing a list into the ascending argument, with boolean True or False. . df.sort_values([&#39;year&#39;,&#39;duration&#39;],ascending=[True,False]).head(4) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 34547 tt0191323 | Oborona Sevastopolya | Oborona Sevastopolya | 1911 | 1911-12-09 | History, War | 100 | Russia | NaN | Vasili Goncharov, Aleksandr Khanzhonkov | ... | Andrey Gromov, N. Semyonov, Olga Petrova-Zvant... | First film ever that was shot by two cameras. ... | 6.0 | 130 | NaN | NaN | NaN | NaN | NaN | NaN | . 38007 tt0266688 | Karadjordje | Karadjordje | 1911 | 1911 | Drama, War | 80 | Serbia | Serbian | Ilija Stanojevic-Cica | ... | Jovan Antonijevic-Djedo, Teodora Arsenovic, Vi... | This is the oldest found dramatic film from Se... | 6.3 | 145 | NaN | NaN | NaN | NaN | 4.0 | NaN | . 3 tt0002130 | L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | 68 | Italy | Italian | Francesco Bertolini, Adolfo Padovan | ... | Salvatore Papa, Arturo Pirovano, Giuseppe de L... | Loosely adapted from Dante&#39;s Divine Comedy and... | 7.0 | 2019 | NaN | NaN | NaN | NaN | 28.0 | 14.0 | . 4 rows × 22 columns . Basic Statistics . Get the number of values using the .count(..) method. . df.year.count() . 81273 . Get the maximum value in a column using the .max(..). . df.year.max() . 2019 . Get the minimum value in a column using the .min(..). . df.year.min() . 1906 . Get the mean of all values in a column using .mean(..). . df.year.mean() . 1993.0072102666322 . Get the median of all values in a column using .median(..). . df.year.median() . 2002.0 . Get the standard deviation of all values in a column using .std(..). . df.year.std() . 23.992283867737942 . Get the variance of all values in a column using .var(..). . df.year.var() . 575.6296851901183 . Get a statistical summary of the dataframe by using the .describe(..) method below. Only columns with numerical values will be analysed by default. . df.describe() . year duration avg_vote votes metascore reviews_from_users reviews_from_critics . count 81273.000000 | 81273.000000 | 81273.000000 | 8.127300e+04 | 12722.000000 | 74196.000000 | 70286.000000 | . mean 1993.007210 | 100.565981 | 5.926587 | 9.421771e+03 | 55.762695 | 43.753194 | 27.992758 | . std 23.992284 | 25.320189 | 1.243315 | 5.220245e+04 | 17.757453 | 159.903568 | 58.708764 | . min 1906.000000 | 40.000000 | 1.000000 | 9.900000e+01 | 1.000000 | 1.000000 | 1.000000 | . 25% 1979.000000 | 88.000000 | 5.200000 | 2.060000e+02 | 43.000000 | 4.000000 | 3.000000 | . 50% 2002.000000 | 96.000000 | 6.100000 | 4.950000e+02 | 56.000000 | 9.000000 | 8.000000 | . 75% 2012.000000 | 108.000000 | 6.800000 | 1.865000e+03 | 69.000000 | 26.000000 | 24.000000 | . max 2019.000000 | 3360.000000 | 10.000000 | 2.159628e+06 | 100.000000 | 8302.000000 | 987.000000 | . If you pass in the include = &#39;all&#39; argument to .describe(..) categorical and numerical statistics are returned. . df.describe(include=&#39;all&#39;) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . count 81273 | 81273 | 81273 | 81273.000000 | 81273 | 81273 | 81273.000000 | 81234 | 80518 | 81200 | ... | 81207 | 78843 | 81273.000000 | 8.127300e+04 | 22804 | 15094 | 29892 | 12722.000000 | 74196.000000 | 70286.000000 | . unique 81273 | 76618 | 76631 | NaN | 21087 | 1264 | NaN | 4632 | 4251 | 32544 | ... | 81159 | 78727 | NaN | NaN | 4425 | 14648 | 29378 | NaN | NaN | NaN | . top tt0116635 | Anna | Anna | NaN | 2010 | Drama | NaN | USA | English | Michael Curtiz | ... | Nobuyo Ôyama, Noriko Ohara, Michiko Nomura, Ka... | The story of | NaN | NaN | $ 1000000 | $ 1000000 | $ 8144 | NaN | NaN | NaN | . freq 1 | 9 | 9 | NaN | 111 | 11809 | NaN | 27490 | 34519 | 86 | ... | 13 | 11 | NaN | NaN | 731 | 19 | 16 | NaN | NaN | NaN | . mean NaN | NaN | NaN | 1993.007210 | NaN | NaN | 100.565981 | NaN | NaN | NaN | ... | NaN | NaN | 5.926587 | 9.421771e+03 | NaN | NaN | NaN | 55.762695 | 43.753194 | 27.992758 | . std NaN | NaN | NaN | 23.992284 | NaN | NaN | 25.320189 | NaN | NaN | NaN | ... | NaN | NaN | 1.243315 | 5.220245e+04 | NaN | NaN | NaN | 17.757453 | 159.903568 | 58.708764 | . min NaN | NaN | NaN | 1906.000000 | NaN | NaN | 40.000000 | NaN | NaN | NaN | ... | NaN | NaN | 1.000000 | 9.900000e+01 | NaN | NaN | NaN | 1.000000 | 1.000000 | 1.000000 | . 25% NaN | NaN | NaN | 1979.000000 | NaN | NaN | 88.000000 | NaN | NaN | NaN | ... | NaN | NaN | 5.200000 | 2.060000e+02 | NaN | NaN | NaN | 43.000000 | 4.000000 | 3.000000 | . 50% NaN | NaN | NaN | 2002.000000 | NaN | NaN | 96.000000 | NaN | NaN | NaN | ... | NaN | NaN | 6.100000 | 4.950000e+02 | NaN | NaN | NaN | 56.000000 | 9.000000 | 8.000000 | . 75% NaN | NaN | NaN | 2012.000000 | NaN | NaN | 108.000000 | NaN | NaN | NaN | ... | NaN | NaN | 6.800000 | 1.865000e+03 | NaN | NaN | NaN | 69.000000 | 26.000000 | 24.000000 | . max NaN | NaN | NaN | 2019.000000 | NaN | NaN | 3360.000000 | NaN | NaN | NaN | ... | NaN | NaN | 10.000000 | 2.159628e+06 | NaN | NaN | NaN | 100.000000 | 8302.000000 | 987.000000 | . 11 rows × 22 columns . Subsetting a Dataframe . You can select a single column by simply typing the name of the column after the dataframe name, separated by a fullstop. A single column is returned as a Series datatype. . Note: This only works if the column name does not contain spaces. . df.year . 0 1906 1 1911 2 1912 3 1911 4 1912 ... 81268 2019 81269 2019 81270 2019 81271 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . Second method for selecting a single column. This method works even if the column name contains spaces. . df[&#39;year&#39;] . 0 1906 1 1911 2 1912 3 1911 4 1912 ... 81268 2019 81269 2019 81270 2019 81271 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . Select multiple columns by passing the column names as a list [..] into the dataframe brackets. This is why there are two square brackets. . df[[&#39;title&#39;,&#39;year&#39;,&#39;votes&#39;]] . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . You can use an equal sign to assign a subset of a dataframe to a new dataframe. This is often used if you want to manipulate a dataframe line by line, which can make it more readable for yourself and others. . df = df[[&#39;title&#39;,&#39;year&#39;,&#39;votes&#39;]] df . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . You can rename column names by passing in a list of new names using the .columns method. . df.columns = [&#39;title_new&#39;,&#39;year_new&#39;,&#39;votes_new&#39;] df . title_new year_new votes_new . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . Rename column names back to their oringinal names. . df.columns = [&#39;title&#39;,&#39;year&#39;,&#39;votes&#39;] df . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . ... ... | ... | ... | . 81268 Jessie | 2019 | 219 | . 81269 Ottam | 2019 | 510 | . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . 81273 rows × 3 columns . You can also change column or index names using the .rename(..) method. Since a key/value pair is used, we pass in a python dictionary, which takes the forma { &#39;key&#39; : &#39;value&#39; }. . Note: A python dictionary uses curly brackets, while a list uses square brackets. . df = df.rename(columns={&#39;title&#39;: &#39;movie_name&#39;}) df.head() . movie_name year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . Now let&#39;s change the column name back to &#39;title&#39; and proceed. . df = df.rename(columns={&#39;movie_name&#39;: &#39;title&#39;}) df.head() . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 1 Den sorte drøm | 1911 | 171 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . Subsetting a Dataframe using .iloc[...] . You can select a value from a column using the .iloc[..] method. . df.title.iloc[2] . &#39;Cleopatra&#39; . You can select an complete row from a dataframe using the following. . df.iloc[2] . title Cleopatra year 1912 votes 420 Name: 2, dtype: object . Select multiple values from a column using the following. . df.title.iloc[0:5] . 0 The Story of the Kelly Gang 1 Den sorte drøm 2 Cleopatra 3 L&#39;Inferno 4 From the Manger to the Cross; or, Jesus of Naz... Name: title, dtype: object . Use negitive indexing to select multiple values at the end of a column. . df.title.iloc[-3:] . 81270 Pengalila 81271 Padmavyuhathile Abhimanyu 81272 Sokagin Çocuklari Name: title, dtype: object . Use negitive indexing to select multiple rows at the end of a dataframe. . df.iloc[-3:] . title year votes . 81270 Pengalila | 2019 | 604 | . 81271 Padmavyuhathile Abhimanyu | 2019 | 369 | . 81272 Sokagin Çocuklari | 2019 | 190 | . Select a single column from a dataframe using its index. In this case by selecting the first column which is &#39;year&#39;. . df.iloc[:,1] . 0 1906 1 1911 2 1912 3 1911 4 1912 ... 81268 2019 81269 2019 81270 2019 81271 2019 81272 2019 Name: year, Length: 81273, dtype: int64 . Select multiple columns from a dataframe using column indexing. . Note: As with python subsetting the first number is included, but the last number is excluded. So only columns 0 and 1 are selected. . df.iloc[:,[0,2]] . title votes . 0 The Story of the Kelly Gang | 537 | . 1 Den sorte drøm | 171 | . 2 Cleopatra | 420 | . 3 L&#39;Inferno | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 438 | . ... ... | ... | . 81268 Jessie | 219 | . 81269 Ottam | 510 | . 81270 Pengalila | 604 | . 81271 Padmavyuhathile Abhimanyu | 369 | . 81272 Sokagin Çocuklari | 190 | . 81273 rows × 2 columns . Select multiple rows from a dataframe using row indexes. . df.iloc[[0,2,3,4],:] . title year votes . 0 The Story of the Kelly Gang | 1906 | 537 | . 2 Cleopatra | 1912 | 420 | . 3 L&#39;Inferno | 1911 | 2019 | . 4 From the Manger to the Cross; or, Jesus of Naz... | 1912 | 438 | . Select a single cell using row and column indexes. . df.iloc[4,1] . 1912 . Subsetting using .loc[..] . You can subset a dataframe using column and index names by using the .loc[..] method. In the example, one column is subset using the column name. . df.loc[:,&#39;title&#39;] . 0 The Story of the Kelly Gang 1 Den sorte drøm 2 Cleopatra 3 L&#39;Inferno 4 From the Manger to the Cross; or, Jesus of Naz... ... 81268 Jessie 81269 Ottam 81270 Pengalila 81271 Padmavyuhathile Abhimanyu 81272 Sokagin Çocuklari Name: title, Length: 81273, dtype: object . # Reimporting the full dataframe from the CSV file. df = pd.read_csv(&#39;IMDb movies.csv&#39;) df.head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | NaN | NaN | NaN | NaN | 4.0 | 2.0 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | USA | English | Charles L. Gaskill | ... | Helen Gardner, Pearl Sindelar, Miss Fielding, ... | The fabled queen of Egypt&#39;s affair with Roman ... | 5.2 | 420 | $ 45000 | NaN | NaN | NaN | 24.0 | 3.0 | . 3 rows × 22 columns . Below all columns between &#39;title&#39; and &#39;genre&#39; are selected. . df.loc[:,&#39;title&#39;:&#39;genre&#39;] . title original_title year date_published genre . 0 The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | . 1 Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | . 2 Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | . 3 L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | . 4 From the Manger to the Cross; or, Jesus of Naz... | From the Manger to the Cross; or, Jesus of Naz... | 1912 | 1913 | Biography, Drama | . ... ... | ... | ... | ... | ... | . 81268 Jessie | Jessie | 2019 | 2019-03-15 | Horror, Thriller | . 81269 Ottam | Ottam | 2019 | 2019-03-08 | Drama | . 81270 Pengalila | Pengalila | 2019 | 2019-03-08 | Drama | . 81271 Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | . 81272 Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | . 81273 rows × 5 columns . df.loc[0:3,&#39;title&#39;:&#39;genre&#39;] . title original_title year date_published genre . 0 The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | . 1 Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | . 2 Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | . 3 L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | . Manipulating dataframe values . # Reimporting the full dataframe from the CSV file. df = pd.read_csv(&#39;IMDb movies.csv&#39;) df.head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | NaN | NaN | NaN | NaN | 4.0 | 2.0 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | USA | English | Charles L. Gaskill | ... | Helen Gardner, Pearl Sindelar, Miss Fielding, ... | The fabled queen of Egypt&#39;s affair with Roman ... | 5.2 | 420 | $ 45000 | NaN | NaN | NaN | 24.0 | 3.0 | . 3 rows × 22 columns . Removing rows and columns with null values . Remove all rows with null (NAN) values using the .dropna(..) method. . df.dropna().head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 488 tt0017136 | Metropolis | Metropolis | 1927 | 1927-02-06 | Drama, Sci-Fi | 153 | Germany | German | Fritz Lang | ... | Alfred Abel, Gustav Fröhlich, Rudolf Klein-Rog... | In a futuristic city sharply divided between t... | 8.3 | 148396 | DEM 6000000 | $ 1236166 | $ 1349711 | 98.0 | 471.0 | 194.0 | . 1005 tt0021749 | City Lights | City Lights | 1931 | 1931-08-21 | Comedy, Drama, Romance | 87 | USA | English | Charles Chaplin | ... | Virginia Cherrill, Florence Lee, Harry Myers, ... | With the aid of a wealthy erratic tippler, a d... | 8.5 | 152716 | $ 1500000 | $ 19181 | $ 32609 | 99.0 | 270.0 | 120.0 | . 2336 tt0027977 | Modern Times | Modern Times | 1936 | 1936-10-16 | Comedy, Drama, Family | 87 | USA | English | Charles Chaplin | ... | Charles Chaplin, Paulette Goddard, Henry Bergm... | The Tramp struggles to live in modern industri... | 8.5 | 197969 | $ 1500000 | $ 163577 | $ 445226 | 96.0 | 262.0 | 146.0 | . 3 rows × 22 columns . Drop all columns with missing values by passing in the axis = &#39;columns&#39; argument. . df.dropna(axis = &#39;columns&#39;) . imdb_title_id title original_title year date_published genre duration avg_vote votes . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | 6.1 | 537 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | 5.9 | 171 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | 5.2 | 420 | . 3 tt0002130 | L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | 68 | 7.0 | 2019 | . 4 tt0002199 | From the Manger to the Cross; or, Jesus of Naz... | From the Manger to the Cross; or, Jesus of Naz... | 1912 | 1913 | Biography, Drama | 60 | 5.7 | 438 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 81268 tt9903716 | Jessie | Jessie | 2019 | 2019-03-15 | Horror, Thriller | 106 | 7.2 | 219 | . 81269 tt9905412 | Ottam | Ottam | 2019 | 2019-03-08 | Drama | 120 | 7.8 | 510 | . 81270 tt9905462 | Pengalila | Pengalila | 2019 | 2019-03-08 | Drama | 111 | 8.4 | 604 | . 81271 tt9911774 | Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | 130 | 8.4 | 369 | . 81272 tt9914286 | Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | 98 | 7.2 | 190 | . 81273 rows × 9 columns . Drop missing values from specified columns using the subset argument. . df.dropna(subset=[&#39;metascore&#39;,&#39;budget&#39;]).head(2) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 73 tt0006864 | Intolerance: Love&#39;s Struggle Throughout the Ages | Intolerance: Love&#39;s Struggle Throughout the Ages | 1916 | 1918-02-24 | Drama, History | 163 | USA | NaN | D.W. Griffith | ... | Lillian Gish, Mae Marsh, Robert Harron, F.A. T... | The story of a poor young woman, separated by ... | 7.8 | 13116 | $ 385907 | NaN | NaN | 93.0 | 105.0 | 77.0 | . 488 tt0017136 | Metropolis | Metropolis | 1927 | 1927-02-06 | Drama, Sci-Fi | 153 | Germany | German | Fritz Lang | ... | Alfred Abel, Gustav Fröhlich, Rudolf Klein-Rog... | In a futuristic city sharply divided between t... | 8.3 | 148396 | DEM 6000000 | $ 1236166 | $ 1349711 | 98.0 | 471.0 | 194.0 | . 2 rows × 22 columns . You can pass the inplace argument into many methods. This will change the dataframe without it needing to be reassigned using the equal sign. . df.dropna(axis=&#39;columns&#39;, inplace = True) df . imdb_title_id title original_title year date_published genre duration avg_vote votes . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | 6.1 | 537 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | 5.9 | 171 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | 5.2 | 420 | . 3 tt0002130 | L&#39;Inferno | L&#39;Inferno | 1911 | 1911-03-06 | Adventure, Drama, Fantasy | 68 | 7.0 | 2019 | . 4 tt0002199 | From the Manger to the Cross; or, Jesus of Naz... | From the Manger to the Cross; or, Jesus of Naz... | 1912 | 1913 | Biography, Drama | 60 | 5.7 | 438 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 81268 tt9903716 | Jessie | Jessie | 2019 | 2019-03-15 | Horror, Thriller | 106 | 7.2 | 219 | . 81269 tt9905412 | Ottam | Ottam | 2019 | 2019-03-08 | Drama | 120 | 7.8 | 510 | . 81270 tt9905462 | Pengalila | Pengalila | 2019 | 2019-03-08 | Drama | 111 | 8.4 | 604 | . 81271 tt9911774 | Padmavyuhathile Abhimanyu | Padmavyuhathile Abhimanyu | 2019 | 2019-03-08 | Drama | 130 | 8.4 | 369 | . 81272 tt9914286 | Sokagin Çocuklari | Sokagin Çocuklari | 2019 | 2019-03-15 | Drama, Family | 98 | 7.2 | 190 | . 81273 rows × 9 columns . # Reimporting the full dataframe from the CSV file. df = pd.read_csv(&#39;IMDb movies.csv&#39;) df.head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | NaN | NaN | NaN | NaN | 4.0 | 2.0 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | USA | English | Charles L. Gaskill | ... | Helen Gardner, Pearl Sindelar, Miss Fielding, ... | The fabled queen of Egypt&#39;s affair with Roman ... | 5.2 | 420 | $ 45000 | NaN | NaN | NaN | 24.0 | 3.0 | . 3 rows × 22 columns . Replacing null values . The .fillna(..) method allows you to fill a null value with a value of your choice. In the example below we fill null values with 0. . We also use the inplace = True argument to change the dataframe without having to reassign it to df. . df[&#39;budget&#39;].fillna(0, inplace=True) df.head(3) . imdb_title_id title original_title year date_published genre duration country language director ... actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics . 0 tt0000574 | The Story of the Kelly Gang | The Story of the Kelly Gang | 1906 | 1906-12-26 | Biography, Crime, Drama | 70 | Australia | NaN | Charles Tait | ... | Elizabeth Tait, John Tait, Norman Campbell, Be... | True story of notorious Australian outlaw Ned ... | 6.1 | 537 | $ 2250 | NaN | NaN | NaN | 7.0 | 7.0 | . 1 tt0001892 | Den sorte drøm | Den sorte drøm | 1911 | 1911-08-19 | Drama | 53 | Germany, Denmark | NaN | Urban Gad | ... | Asta Nielsen, Valdemar Psilander, Gunnar Helse... | Two men of high rank are both wooing the beaut... | 5.9 | 171 | 0 | NaN | NaN | NaN | 4.0 | 2.0 | . 2 tt0002101 | Cleopatra | Cleopatra | 1912 | 1912-11-13 | Drama, History | 100 | USA | English | Charles L. Gaskill | ... | Helen Gardner, Pearl Sindelar, Miss Fielding, ... | The fabled queen of Egypt&#39;s affair with Roman ... | 5.2 | 420 | $ 45000 | NaN | NaN | NaN | 24.0 | 3.0 | . 3 rows × 22 columns . You will now see some more useful methods for quickly changing values in a dataframe. But first we will create a new column based on divided the avg_vote by the number of votes per moview. We&#39;ll call the column avg_votes_div_votes. We will also multiply by 100 to make the numbers more interesting to play around with. . Note: the new column is appending to the most right position in the dataframe. . df[&#39;avg_votes_div_votes&#39;] = (df[&#39;avg_vote&#39;] / df[&#39;votes&#39;]) * 100 df[&#39;avg_votes_div_votes&#39;] . 0 1.135940 1 3.450292 2 1.238095 3 0.346706 4 1.301370 ... 81268 3.287671 81269 1.529412 81270 1.390728 81271 2.276423 81272 3.789474 Name: avg_votes_div_votes, Length: 81273, dtype: float64 . Rounding values . Now you will learn how to use the .round(..) method to round the new column values to a specified decimal place. In this case we will round it to 2 decimal places by passing 2 in as an argument. . df[&#39;avg_votes_div_votes&#39;].round(3) . 0 1.136 1 3.450 2 1.238 3 0.347 4 1.301 ... 81268 3.288 81269 1.529 81270 1.391 81271 2.276 81272 3.789 Name: avg_votes_div_votes, Length: 81273, dtype: float64 . Changing data types . We can also change the type of data to decimals (float), integers (int), text strings (str), and boolean True/False (bool) by passing these valus into the .astype(..) method. In the example below we will covert the float value to an integer as follows. Integers do not support decimal places so all decimals will be removed. . Note: This does not act the same way as round. For example, if you round 1.8, it will be rounded up to 2. However, if you convert 1.8 to an integer the .8 will be removed ao it will become simply 1 instead. . df[&#39;avg_votes_div_votes&#39;].astype(int) . 0 1 1 3 2 1 3 0 4 1 .. 81268 3 81269 1 81270 1 81271 2 81272 3 Name: avg_votes_div_votes, Length: 81273, dtype: int64 . Now let&#39;s convert it to a text string. Once a text string it will not be possible to perform mathematical operations on the values. . df[&#39;avg_votes_div_votes&#39;] = df[&#39;avg_votes_div_votes&#39;].astype(str) df[&#39;avg_votes_div_votes&#39;] . 0 1.1359404096834265 1 3.4502923976608186 2 1.2380952380952381 3 0.3467062902426944 4 1.3013698630136987 ... 81268 3.2876712328767126 81269 1.5294117647058822 81270 1.3907284768211923 81271 2.2764227642276422 81272 3.7894736842105265 Name: avg_votes_div_votes, Length: 81273, dtype: object . we can check that this values are actually strings and not numbers by using the type(..) function. We will check the first value by indexing it as follows. . df[&#39;avg_votes_div_votes&#39;][0] . &#39;1.1359404096834265&#39; . Once indexed we apply the type(..) function. . type(df[&#39;avg_votes_div_votes&#39;][0]) . str . Finally, we will wrap up the lesson by using the .replace(..) method to replace the values in the text with other values. Specifically, we will replace the number values to their english equivalents e.g. &#39;1&#39; with &#39;one&#39;. . df[&#39;avg_votes_div_votes&#39;].str.replace(&#39;1&#39;,&#39;o&#39;) . 0 o.o359404096834265 1 3.4502923976608o86 2 o.238095238095238o 3 0.3467062902426944 4 o.30o3698630o36987 ... 81268 3.28767o2328767o26 81269 o.5294oo7647058822 81270 o.39072847682oo923 81271 2.2764227642276422 81272 3.7894736842o05265 Name: avg_votes_div_votes, Length: 81273, dtype: object . Now let&#39;s replace multiple values. This time each number with the first letter of its english equivalent. e.g. &#39;2&#39; with &#39;t&#39;, and &#39;5&#39; with &#39;f&#39;. . df[&#39;avg_votes_div_votes&#39;].replace({&#39;1&#39;:&#39;o&#39;,&#39;2&#39;:&#39;t&#39;,&#39;3&#39;:&#39;t&#39;,&#39;4&#39;:&#39;f&#39;,&#39;5&#39;:&#39;f&#39;,&#39;6&#39;:&#39;s&#39;,&#39;7&#39;:&#39;s&#39;,&#39;8&#39;:&#39;e&#39;,&#39;9&#39;:&#39;n&#39;,&#39;0&#39;:&#39;z&#39;}, regex=True) . 0 o.otfnfzfznsetftsf 1 t.ffztnttnssszeoes 2 o.tteznftteznftteo 3 z.tfsszstnztftsnff 4 o.tzotsnestzotsnes ... 81268 t.tesssotttesssots 81269 o.ftnfoossfszfeett 81270 o.tnzstefssetoontt 81271 t.tssfttssfttssftt 81272 t.senfstseftozftsf Name: avg_votes_div_votes, Length: 81273, dtype: object . Acknowledgements: . I&#39;d like to acknowledge the following sources provided inspiration for the examples in this blog post. . Pandas Tutorial, Pycon 2015, Brandon Rhodes | 10 minutes to Pandas, Pandas development team | Pandas cheat Sheet, Dataquest | .",
            "url": "https://sams101.github.io/DataScience/pandas/python/2020/06/07/Pandas-Basics.html",
            "relUrl": "/pandas/python/2020/06/07/Pandas-Basics.html",
            "date": " • Jun 7, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sams101.github.io/DataScience/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your page/pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sams101.github.io/DataScience/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sams101.github.io/DataScience/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}